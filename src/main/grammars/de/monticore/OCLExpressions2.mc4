
/*
***************************************************************************************
Copyright (c) 2017, MontiCore
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software
without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
***************************************************************************************
*/

package de.monticore;

component grammar OCLExpressions2 extends de.monticore.common.Common, de.monticore.CommonExpressions,
                                            de.monticore.SetExpressions2, de.monticore.ShiftExpressions {

external EInExpr;
external EDeclaration;

    ImpliesExpression implements Expression <200> =
        leftExpression:Expression
        "implies"
        rightExpression:Expression;

	SingleLogicalORExpr implements Expression <210> =
		left:Expression
		"|"
		right:Expression;

    /** ASTForAllExpr defines a quantified expression for collections e.g.
        "forall x in Y : ...".
        @attribute EInExpr
                   List of collection variable declarations, e.g:
                   "forall a in A: ..."
                   "forall a in List <..> : ..."
                   "forall a: ..."
        @attribute OCLExpression
                   The body of forall iteration as an expression.

    */
    ForallExpr implements Expression <100> =
        "forall"
        EInExpr
        ":"
        Expression
        ;

    /** ASTExistsExpr defines a quantified expression for collections e.g.
        "exists x in Y : ...".
        @attribute EInExpr
                   List of collection variable declarations, e.g:
                    "exists a in A: ..."
                    "exists a in List <..> : ..."
                    "exists a: ..."
        @attribute OCLExpression
                   The body of exists iteration as an expression.

    */
    ExistsExpr implements Expression <100> =
        "exists"
        EInExpr
        ":"
        Expression
        ;

    /** ASTOCLAnyExpr defines iterations with all objects of a collection e.g.
        any x in set or any Auction.
        @attribute OCLExpression
                   A collection defined by an expression.
    */
    AnyExpr implements Expression <90> =
        "any" Expression;

    /** ASTOCLLetinExpr are used to define local vars or methods. The defined
        vars and methods are visible in the in-expression.
        @attribute declarations
                   A list of variable or method declarations.
        @attribute OCLExpression
                   An expression where previous declarations are used.
    */
    LetinExpr implements Expression <120> =
        "let" (declarations:EDeclaration ";")+
        "in" Expression;

    /** ASTOCLLetDeclaration represents a list of let-declarations inside of a
        let-statement. This contains variable- or method-declarations.
        @attribute declarations
               List of variable- or method-declarations.
    */
    LetDeclaration implements Expression <120> =
        "let" (declarations:EDeclaration ";")+;

    /** ASTOCLIterateExpr is used to iterate collections. It differs from
        Java5-Iterator.
        Example:
            iterate{ elem in Auction; int acc=0 : acc = acc+elem.numberOfBids }.
        @attribute iterationDeclarator
                   The elements of a collection that will be iterated as an
                   OCLCollectionVarDeclaration.
        @attribute initDeclarator
                   Definiton of a accumulation variable as an EDeclaration.
        @attribute accumulatorName
                   Name of the accumulation assignment variable.
        @attribute accumulatorValue
                   Right hand of the accumulation as an expression.
    */
    IterateExpr implements Expression <110> =
        "iterate" "{"
        iterationDeclarator:EInExpr ";"
        initDeclarator:EDeclaration ":"
        accumulatorName:Name "=" accumulatorValue:Expression
        "}";

    TypeCastExpression implements Expression <200> =
    	"(" Type ")" Expression;

    ParenthizedExpression implements Expression =
        "(" Expression ")"
        ("." qualification:OCLPrimary)?;

    /*============================= OCL PRIMARYS =============================*/

    /** ASTOCLPrimary defines primaries of OCL.
    */
    interface OCLPrimary extends Expression;

    OCLIsNewPrimary implements OCLPrimary =
        "isnew" "(" Expression ")";

    OCLDefinedPrimary implements OCLPrimary =
        "defined" "(" Expression ")";

    /** ASTOCLQualifiedPrimary represents qualified identifier.
        @attribute qualifications
                   List of names of qualified identifier.
        @attribute postfixQualification
                   Optional argument-, array- or atpre, **-qualifcation.
        @attribute OCLQualifiedPrimary
                   Optional recursive linkage of qualified primary.

        example: name.name.name(argument).nextQualifiedPrimary
                 name.name[expr]
                 name**
                 name@pre
    */
    OCLQualifiedPrimary implements OCLPrimary =
        (Name || ".")+
        postfixQualification:OCLQualification?
        ("." OCLQualifiedPrimary)?
        ;



    /** ASTOCLQualification defines qualification postfixes of a qualified
        primary. A qualification is one of the three kinds:
            - x[0] (ArrayQualification)
            - x(y) (ArgumentQualification)
            - x** or xAtpre (PostfixQualification)
    */
    interface OCLQualification;

    /** ASTOCLArrayQualification represents an array qualification.
        @attribute arguments
            The array arguments (indices).
    */
    OCLArrayQualification implements OCLQualification=
        ("[" arguments:Expression "]")+
        ;

    /** ASTOCLArgumentQualification represents the arguments of a method call.
        @attribute arguments
            Arguments of method call.
    */
    OCLArgumentQualification implements OCLQualification =
        "(" (Expression || "," )* ")"
        ;

    /** ASTOCLPostfixQualification represents a ATpre qualification.
        @attribute OCLQualification
                   Optional qualification.
    */
    OCLAtPreQualification implements OCLQualification =
        atpre:["@pre"]
        OCLQualification?;

    /** ASTOCLPostfixQualification represents a ** qualification.
        @attribute OCLQualification
                   Optional qualification.
    */
    OCLPostfixQualification implements OCLQualification =
        transitive:["**"]
        OCLQualification?;

}
