/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

package ocl.monticoreocl;

grammar OCL extends de.monticore.lang.NumberUnit, de.monticore.OCLExpressions {

	/*========================================================================*/
    /*============================ PRODUCTIONS  ==============================*/
    /*========================================================================*/

    /*====================== HEADER DEFINITIONS ==============================*/


	CompilationUnit =
		("package" package:(Name || ".")+ ";")?
		(ImportStatement)*
		OCLFile;

	/** ASTOCLFile represents a file that contains an OCL-Constraint.
        @attribute fileName
                   Name of OCLFile (necessary for MCCompilationUnit)
        @attribute OCLConstraints
                   List of OCL-constraints.
    */
    // Note: Prefix should be only "ocl" (-> Context Condition). On the
    //       other side this should not prevent using "ocl" as identifiers.
    //       Therefore this is not defined as terminal symbol.

	OCLFile =
        prefix:Name
        fileName:Name "{"
        OCLConstraint*
        "}"
        |
        OCLConstraint*
        ;


    /** ASTOCLConstraint subsumes all OCL types that are used as embedded OCL.
        An OCLConstraint (Invariant or Method- or
        ConstructorSpec) or an abstract expression (expression).
    */
    interface OCLConstraint;


	/** ASTOCLOperationSignature subsumes method and constructor signatures.
    */
	interface OCLOperationSignature;

	OCLTaggedExpr = "<<" (Expression | OCLConstraint) ("," (Expression | OCLConstraint))* ">>" ;

	/** ASTOCLOperationConstraint represents the typical method or constructor
        specifications with pre- and post-conditions.
        @attribute OCLTaggedExpr
        		   is needed in cases like "<<special, author = "mustermann">> context...." , e.g. taggedvalues1.ocl
        @attribute OCLOperationSignature
                   Operation Signature (of a method or constructor).
        @attribute LetDeclaration
                   Optional let-declarations.
        @attribute OCLPreStatement
                   Optional pre-statements.
        @attribute OCLPostStatement
                   Optional post-statements.
    */
	OCLOperationConstraint implements OCLConstraint =
        OCLTaggedExpr?
        "context"
        OCLTaggedExpr?
        OCLOperationSignature
       	LetDeclaration?
        OCLPreStatement?
        OCLPostStatement?;

	/** ASTOCLInvariant represents the typical invariant definitions of OCL.
        @attribute OCLClassContext
        		   Optional keyword definitions: (context|import) and class definition
        @attribute name
                   Name of the invariant.
        @attribute OCLParameters
                   Optional parameters of the invariant.
        @attribute statements
                   List of boolean expressions.
    */
	OCLInvariant implements OCLConstraint =
        OCLClassContext?
        "inv" Name?
        OCLParameters?
         ":"
         //Todo remove ";"
        (statements:Expression ";")+
        ;

    /** ASTOCLClassContext represents the OCL-Context-Clause of an invariant.
        @attribute contextType
                   Type of context (context or import)
                   For import look at http://mbse.se-rwth.de/book1/index.php?c=chapter3-1#x1-400003.1.1
    */
    OCLClassContext =
    	(context:["context"] | Import:["import"])
    	(OCLContextDefinition || ",")+
    	;

    /** ASTOCLContextDefinition can be of the followoing type.
        Auction | Auction a | a in (...) | Auction a in (...)
        The rule is written as follows to avoid matching empty strings
    */
	OCLContextDefinition =
		Type | InExpr;

	/** ASTOCLPreStatement represents a list of pre-statements subsumed to a
        pre-condition.
        @attribute name
                   Optional name of pre-condition.
        @attribute statements
                   List of boolean expressions.
    */
	OCLPreStatement  =
        "pre" Name? ":"
        (statements:Expression+ ";")+;

    /** ASTOCLPostStatement represents a list of post-statements subsumed to a
        post-condition.
        @attribute name
                   Optional name of post-conditions.
        @attribute statements
                   List of boolean expressions.
    */
    OCLPostStatement  =
        "post" Name? ":"
        (statements:Expression+ ";")+;

	/** ASTOCLMethodSignature defines the signature of a Java5 method.
        @attribute ReturnType
                   Optional complex type that is returned by given method
        @attribute methodName
                   Name of given method.
        @attribute OCLParameters
                   Parameter declarations of given method.
        @attribute OCLThrowsClause
                   Optional throwables.

        Example : context Person.addMessages(Message m):
    */
	OCLMethodSignature implements OCLOperationSignature =
        ReturnType?
        methodName:QualifiedName
        OCLParameters
        OCLThrowsClause?;

    /** ASTOCLConstructorSignature defines signature of a constructor.
        @attribute ReferenceType
                   Type of the Constructor.
        @attribute OCLParameters
                   Parameters of constructor.
        @attribute OCLThrowsClause
                   Optional throwables.
    */
    OCLConstructorSignature implements OCLOperationSignature =
        "new" referenceType:Name
        OCLParameters
        OCLThrowsClause?;


    /** ASTOCLParameters defines a list of parameter declarations (can also be
        empty)
    */
    OCLParameters =
        "(" params:(OCLParameterDeclaration || ",")* ")";

    OCLParameterDeclaration  =
        Type Name;

	/** ASTOCLThrowsClause defines throwables for a method or constructor
        signature.
        @attribute throwables
                   List of throwables.
    */
    OCLThrowsClause =
        "throws" throwables:(Name || ",")+;


    /*============================== DECLARATORS ============================*/

 	/** ASTOCLDeclaration defines declarations of variables and methods, that
        are used in let-constructs.
    */
 	interface OCLDeclaration;
    EDeclaration = OCLDeclaration;

    /** ASTOCLMethodDeclaration defines internal helping methods in let
        constructs, e.g. "max(int a, int b) = if (a>b) then ...".
        @attribute ReturnType
                   Optional returntype of method.
        @attribute name
                   Name of method.
        @attribute OCLParameters
                   List of parameters (can also be emtpy).
        @attribute Expression
                   Method definition as an expression (right hand of the
                   assignment).
    */
    symbol OCLMethodDeclaration implements OCLDeclaration =
        ReturnType?
        Name
        OCLParameters
        "=" Expression;

 	 /** ASTOCLVariableDeclaration defines a local variable in a let declaration
        or a comprehension.
        @attribute Type
                   Optional type.
        @attribute name
                   Name of the variable.
        @attribute Expression
                   Definition as an expression (right hand of the assignment).
     */
     OCLVariableDeclaration implements OCLDeclaration =
        Type?
        Name
        "=" Expression;


    /*============================= OCL PRIMARYS =============================*/

    /** ASTOCLNumberLiteral and NonNumberLiteral are defined here to overwrite
        and implement numbers from SI grammar
        to support expressions as 7 m/s
    */
    OCLNonNumberPrimary implements OCLPrimary <0> =
        value:Literal;

    OCLNumberPrimary implements OCLPrimary <0> =
        value:Number;

}
